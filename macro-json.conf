;
;  @param string $simpleJsonPath
;  @param string $jsonContentVarName
;  @param string $outputVarName
;
;  @USAGE
;  same => n,SET(CURL_RESPONSE=${CURL(http://api.com/json)})
;  same => n,Macro(json,/result/2/name,CURL_RESPONSE,SECOND_ITEM_NAME)
;  same => n,Noop(${SECOND_ITEM_NAME})
;  same => n,Noop(${MACRO_JSON_RESULT})
;  same => n,Noop(${MACRO_JSON_ERROR_MESSAGE})
;
[macro-json]
  exten => s,1,Set(ESCAPED_JSON=${STRREPLACE(${ARG2},\','\\'')})
  same => n,Set(RESULT=${SHELL(php -r "\$paths = explode('/', trim('${ARG1}', '/'))\; !empty(\$paths) OR die('ERROR:MISSING_PATH')\; !empty(\$argv[1]) OR die('ERROR:EMPTY_JSON_STRING')\; \$json = json_decode(\$argv[1], true) OR die('ERROR:INVALID_JSON_STRING_FORMAT ' . \$json)\; foreach (\$paths as \$path) \$json = isset(\$json[\$path]) ? \$json[\$path] : die('ERROR:PATH_NOT_FOUND ' . \$path)\; echo 'SUCCESS:' . \$json\;" '${ESCAPED_JSON}' 2>&1 )})
	same => n,Set(TYPE=${CUT(RESULT,:,1)})
	same => n,Set(VALUE=${CUT(RESULT,:,2)})

	same => n,GotoIf($["${TYPE}" != "SUCCESS"] ? error : success)

    same => n(error),Set(${ARG3}=)
    same => n,Set(MACRO_JSON_RESULT=ERROR)
    same => n,Set(MACRO_JSON_ERROR_MESSAGE=${VALUE})
    same => n,MacroExit()

    same => n(success),Set(${ARG3}=${VALUE})
    same => n,Set(MACRO_JSON_RESULT=SUCCESS)
    same => n,Set(MACRO_JSON_ERROR_MESSAGE=)
    same => n,MacroExit()
